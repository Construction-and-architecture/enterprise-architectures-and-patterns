// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod fermyon {
        #[allow(dead_code)]
        pub mod hmac {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Error = _rt::String;
                #[doc(hidden)]

                macro_rules! __export_fermyon_hmac_types_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _: () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_fermyon_hmac_types_0_1_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod sign {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Error = super::super::super::super::exports::fermyon::hmac::types::Error;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_sign_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let len1 = arg3;
                    let result2 = T::sign(
                        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
                        _rt::Vec::from_raw_parts(arg2.cast(), len1, len1),
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let vec4 = (e).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3.add(8).cast::<usize>() = len4;
                            *ptr3.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr3.add(8).cast::<usize>() = len5;
                            *ptr3.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_sign<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn sign(
                        data: _rt::Vec<u8>,
                        keyvalue: _rt::Vec<u8>,
                    ) -> Result<_rt::Vec<u8>, Error>;
                }
                #[doc(hidden)]

                macro_rules! __export_fermyon_hmac_sign_0_1_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "fermyon:hmac/sign@0.1.0#sign"]
          unsafe extern "C" fn export_sign(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
            $($path_to_types)*::_export_sign_cabi::<$ty>(arg0, arg1, arg2, arg3)
          }
          #[export_name = "cabi_post_fermyon:hmac/sign@0.1.0#sign"]
          unsafe extern "C" fn _post_return_sign(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_sign::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_fermyon_hmac_sign_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod verify {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_verify_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let len1 = arg3;
                    let len2 = arg5;
                    let result3 = T::verify(
                        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
                        _rt::Vec::from_raw_parts(arg2.cast(), len1, len1),
                        _rt::Vec::from_raw_parts(arg4.cast(), len2, len2),
                    );
                    match result3 {
                        true => 1,
                        false => 0,
                    }
                }
                pub trait Guest {
                    fn verify(
                        data: _rt::Vec<u8>,
                        keyvalue: _rt::Vec<u8>,
                        tag: _rt::Vec<u8>,
                    ) -> bool;
                }
                #[doc(hidden)]

                macro_rules! __export_fermyon_hmac_verify_0_1_0_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "fermyon:hmac/verify@0.1.0#verify"]
        unsafe extern "C" fn export_verify(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,) -> i32 {
          $($path_to_types)*::_export_verify_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_fermyon_hmac_verify_0_1_0_cabi;
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_signing_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::fermyon::hmac::types::__export_fermyon_hmac_types_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::fermyon::hmac::types);
  $($path_to_types_root)*::exports::fermyon::hmac::sign::__export_fermyon_hmac_sign_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::fermyon::hmac::sign);
  $($path_to_types_root)*::exports::fermyon::hmac::verify::__export_fermyon_hmac_verify_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::fermyon::hmac::verify);
  )
}
#[doc(inline)]
pub(crate) use __export_signing_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:signing:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 377] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfb\x01\x01A\x02\x01\
A\x07\x01B\x02\x01s\x04\0\x05error\x03\0\0\x04\x01\x18fermyon:hmac/types@0.1.0\x05\
\0\x02\x03\0\0\x05error\x01B\x06\x02\x03\x02\x01\x01\x04\0\x05error\x03\0\0\x01p\
}\x01j\x01\x02\x01\x01\x01@\x02\x04data\x02\x08keyvalue\x02\0\x03\x04\0\x04sign\x01\
\x04\x04\x01\x17fermyon:hmac/sign@0.1.0\x05\x02\x01B\x03\x01p}\x01@\x03\x04data\0\
\x08keyvalue\0\x03tag\0\0\x7f\x04\0\x06verify\x01\x01\x04\x01\x19fermyon:hmac/ve\
rify@0.1.0\x05\x03\x04\x01\x1afermyon:hmac/signing@0.1.0\x04\0\x0b\x0d\x01\0\x07\
signing\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.20\
2.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
